class disjointSet
{
   vector<int>rank,parent,sz;
    public:
   disjointSet(int n)
   {
       rank.resize(n+1,0);
       parent.resize(n+1);
       sz.resize(n+1,1);
       for(int i=0;i<n+1;i++)parent[i]=i;
   }
   // first function is to findParent
   int findUParent(int temp)
   {
      if(temp==parent[temp]) return temp;
      return parent[temp]=findUParent(parent[temp]);
      // path compression is also done here
   }
   // now we have to do the operation for union
   void unionByRank(int a, int b)
   {
       int parentA=findUParent(a);
       int parentB=findUParent(b);
       if(parentA==parentB) return ;
       if(rank[parentA]>rank[parentB])
       {
         rank[parentA]++;
         parent[parentB]=parentA;
       }
       else
       {
         rank[parentB]++;
         parent[parentA]=parentB;
       }
       return;
   }
   void unionBySize(int a, int b)
   {
      int parentA=findUParent(a);
      int parentB=findUParent(b);
      if(parentA==parentB) return ;
      if(sz[parentA]> sz[parentB])
      {
         parent[parentB]=parentA;
         sz[parentA]+=sz[parentB];
      }
      else
      {
         parent[parentA]=parentB;
         sz[parentB]+=sz[parentA];
      }
      return; 
   }
};
